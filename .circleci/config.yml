version: 2.1
orbs:
  node: circleci/node@7.1.1
  win: circleci/windows@5.1.0

executors:
  linux-amd:
    machine:
      image: ubuntu-2204:2023.10.1

  mac-amd:
    macos:
      xcode: 14.3.1
    resource_class: macos.x86.medium.gen2

  mac-arm:
    macos:
      xcode: 14.3.1
    resource_class: macos.m1.large.gen1

commands:
  install-npm:
    steps:
      - node/install:
          install-yarn: true
          node-version: "22.17.1"
  
  install-dependencies:
    steps:
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
  
  publish-electron-app:
    steps:
      - run:
          name: Publish
          command: yarn run publish
          environment: 
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"
  
  yarn-make:
    steps:
      - run:
          name: Make Package
          command: yarn run make
          environment: 
            CARGO_NET_GIT_FETCH_WITH_CLI: "true"

  get-images:
    steps:
      - run:
          name: Get Images
          command: git clone https://$GITHUB_TOKEN@github.com/owlbear-rodeo/kenku-fm-assets.git
  
  move-images:
    steps:
      - run:
          name: Move Images to Directory
          command: | 
            mv ./kenku-fm-assets/backgrounds/*.jpg ./src/player/backgrounds
            rm -rf ./kenku-fm-assets

jobs:
  publish-electron-app-linux-amd:
    executor: linux-amd
    working_directory: ~/repo
    steps:
      - install-npm
      - run:
          name: Install dpkg, fakeroot and rust
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot rpm
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            source $HOME/.cargo/env
      - run: 
          name: Install Rust Version
          command: |
            rustup install 1.79.0
      - run: 
          name: Install CMake
          command: sudo apt-get install cmake -y
      - checkout
      - install-dependencies
      - get-images
      - move-images
      - run:
          name: Install Cargo CP Artifcact
          command: npm install -g cargo-cp-artifact
      - publish-electron-app

  publish-electron-app-win:
    executor:
      name: win/default
      size: "large"
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install Python
          command: |
            choco install python --version=3.7.9
            python -m pip install --upgrade pip
      - run:
          name: Install Widevine Python Module
          command: |
            python -V
            python -m pip install --upgrade pip
            python -m pip install --upgrade castlabs-evs
      - run:
          name: Install Node
          command: |
            nvm install 18.19.0
            nvm use 18.19.0
            nvm alias default 18.19.0
            echo 'nvm use default &>/dev/null' >> $BASH_ENV
      - run:
          name: Install Yarn
          command: npm install -g yarn
      - run:
          name: Install Cargo CP Artifcact
          command: npm install -g cargo-cp-artifact
      - install-dependencies
      - run: 
          name: Install Rust
          command: |
            # choco install visualstudio2019-workload-vctools, llvm, rustup.install
            choco install rustup.install
      - run: 
          name: Install Rust Version
          command: |
            rustup install --no-self-update 1.68.0
            rustc --version
      - run: 
          name: Install CMake
          command: choco install cmake --installargs 'ADD_CMAKE_TO_PATH=User'
      - run:
          name: Get Images
          shell: bash.exe
          command: git clone https://$GITHUB_TOKEN@github.com/owlbear-rodeo/kenku-fm-assets.git
      - run:
          name: Move Images to Directory
          shell: bash.exe
          command: | 
            mv ./kenku-fm-assets/backgrounds/*.jpg ./src/player/backgrounds
            rm -rf ./kenku-fm-assets
      - yarn-make
      - run:
          name: Signtool
          command: |
            echo $env:WINDOWS_CERT | openssl base64 -A -d -out certificate.pfx
            
            $DIR = $(pwd)
            $CERT = "${DIR}\certificate.pfx"
            $CERT_PASSWORD = $(echo $env:WINDOWS_CERT_PWD | openssl base64 -A -d)

            C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign /d /a /f "${CERT}" /p "${CERT_PASSWORD}" /tr "http://timestamp.comodoca.com" /td "sha256" /fd "sha256" "${DIR}\out\Kenku FM-win32-x64\kenku-fm.exe"
            C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign /d /a /f "${CERT}" /p "${CERT_PASSWORD}" /tr "http://timestamp.comodoca.com" /td "sha256" /fd "sha256" "${DIR}\out\Kenku FM-win32-x64\Squirrel.exe"
      - run:
          name: Widevine Signature
          command: |
            python -m castlabs_evs.account -n reauth -A $env:CASTLABS_ACCOUNT_NAME -P $env:CASTLABS_ACCOUNT_PASSWORD
            python -m castlabs_evs.vmp sign-pkg ".\out\Kenku FM-win32-x64"
      - run:
          name: Create App
          shell: bash.exe
          command: |
            CERT_PASSWORD=$(echo "${WINDOWS_CERT_PWD}" | openssl base64 -A -d)
            yarn install --non-interactive --frozen-lockfile --cwd ./publish/windows
            
            VERSION=${CIRCLE_TAG//v}
            node ./publish/windows/index.js ./ $VERSION  $CERT_PASSWORD
      - run:
          name: Publish
          shell: bash.exe
          command: |
            VERSION=${CIRCLE_TAG//v}
            RELEASE_ID=$(./publish/script-get-github-release.sh $CIRCLE_TAG $GITHUB_TOKEN)
            ./publish/script-win.sh ./out/windows/kenku-fm-$VERSION-win32-x64.exe $GITHUB_TOKEN $RELEASE_ID kenku-fm-$VERSION-win32-x64.exe
            ./publish/script-win.sh ./out/windows/kenku-fm-$VERSION-full.nupkg $GITHUB_TOKEN $RELEASE_ID kenku-fm-$VERSION-full.nupkg
            ./publish/script-win.sh ./out/windows/RELEASES $GITHUB_TOKEN $RELEASE_ID RELEASES

  publish-electron-app-mac:
    parameters:
        mac-executor:
          type: string
        arch:
          type: string
    executor: << parameters.mac-executor >>
    working_directory: ~/repo
    environment:
      KENKU_FM_MAC_PATH: "./out/Kenku\ FM-darwin-<< parameters.arch >>"
      KENKU_FM_MAC_ZIP_PATH: "./out/mac"
    steps:
      - install-npm
      - run:
          name: Install Widevine Python Module
          command: python3 -m pip install --upgrade castlabs-evs
      - checkout
      - install-dependencies
      - get-images
      - move-images
      - run: 
          name: Install Rust
          command: |
            brew install rustup
            rustup-init -y
            source "$HOME/.cargo/env"
      - run: 
          name: Install Rust Version
          command: |
            rustup install 1.68.0
            rustc --version
      - run:
          name: Install CMake
          command: |
            brew install cmake
      - run:
          name: Install Cargo CP Artifcact
          command: npm install -g cargo-cp-artifact
      - yarn-make
      - run:
          name: Widevine Signature
          command: |
            python3 -m castlabs_evs.account -n reauth -A "$CASTLABS_ACCOUNT_NAME" -P "$CASTLABS_ACCOUNT_PASSWORD"
            python3 -m castlabs_evs.vmp sign-pkg "$KENKU_FM_MAC_PATH"
      - run:
          name: Import Apple Security Keychain
          command: |
            export CERTIFICATE_P12=certificate.p12;
            echo "${CERT_OSX_P12}"| base64 --decode -o $CERTIFICATE_P12;
            export KEYCHAIN=kenku-fm.keychain;
            security create-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
            security default-keychain -s "$KEYCHAIN";
            security unlock-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
            security import "$CERTIFICATE_P12" -k "$KEYCHAIN" -P "${CERT_PASSWORD}" -A
            security set-key-partition-list -S apple-tool:,apple: -s -k "$APPLE_KEYCHAIN_PASSWORD" "$KEYCHAIN"
      - run:
          name: OSX Signature
          command: |
            npx electron-osx-sign "$KENKU_FM_MAC_PATH"/Kenku\ FM.app --gatekeeper-assess=false --identity="Developer ID Application: Mitchell McCaffrey (${APPLE_DEVELOPER_TEAM_ID})" --hardened-runtime=true --entitlements="entitlements.plist" --entitlements-inherit="entitlements.plist"
      - run:
          name: Zip App
          command: ditto -c -k --sequesterRsrc --keepParent "$KENKU_FM_MAC_PATH"/Kenku\ FM.app "$KENKU_FM_MAC_PATH"/Kenku\ FM.zip
      - run:
          name: Notarize Zip file
          command: xcrun notarytool submit "$KENKU_FM_MAC_PATH"/Kenku\ FM.zip --apple-id "$APPLE_DEVELOPER_EMAIL" --password "$APPLE_DEVELOPER_PASSWORD" --team-id "$APPLE_DEVELOPER_TEAM_ID" --wait --output-format json
      - run:
          name: Staple
          command: xcrun stapler staple -v "$KENKU_FM_MAC_PATH"/Kenku\ FM.app
      - run:
          name: Zip App - Release Version
          command: ditto -c -k --sequesterRsrc --keepParent "$KENKU_FM_MAC_PATH"/Kenku\ FM.app "$KENKU_FM_MAC_ZIP_PATH"/Kenku\ FM.zip
      - run:
          name: Create DMG
          command: |
            npx electron-installer-dmg --background=./src/assets/dmg-background.png --icon=./src/assets/setup.icns --out="$KENKU_FM_MAC_PATH"/ "$KENKU_FM_MAC_PATH"/Kenku\ FM.app Kenku\ FM
      - run:
          name: Publish DMG
          command: |
            VERSION=${CIRCLE_TAG//v}
            RELEASE_ID=$(./publish/script-get-github-release.sh $CIRCLE_TAG $GITHUB_TOKEN)
            ./publish/script-macos.sh "$KENKU_FM_MAC_PATH"/Kenku\ FM.dmg $GITHUB_TOKEN $RELEASE_ID kenku-fm-darwin-<< parameters.arch >>-$VERSION.dmg
            ./publish/script-macos.sh "$KENKU_FM_MAC_PATH"/Kenku\ FM.zip $GITHUB_TOKEN $RELEASE_ID kenku-fm-darwin-<< parameters.arch >>-$VERSION.zip

workflows:
  deploy-linux-amd:
    jobs:
      - publish-electron-app-linux-amd:
          filters: &tag
            tags:
              only: 
                - /^v[0-9]+(\.[0-9]+)*$/
                - /^v[0-9]+(\.[0-9]+)*-([a-z]+)*$/
                - /^v[0-9]+(\.[0-9]+)*-([a-z]+)*[\.0-9]+$/
            branches:
              ignore: /.*/
  deploy-win:
    jobs:
      - publish-electron-app-win:
          filters:
            <<: *tag
  deploy-mac-amd:
    jobs:
      - publish-electron-app-mac:
          mac-executor: "mac-amd"
          arch: "x64"
          filters: 
            <<: *tag
  deploy-mac-arm:
    jobs:
      - publish-electron-app-mac:
          mac-executor: "mac-arm"
          arch: "arm64"
          filters: 
            <<: *tag