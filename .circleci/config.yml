version: 2.1
orbs:
  node: circleci/node@4.9.0
  win: circleci/windows@2.3.0

jobs:
  build-linux-arm:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    working_directory: ~/repo
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: "16.13.1"
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Login to Github Packages
          command: |
            npm set //npm.pkg.github.com/:_authToken=${GITHUB_PACKAGE_TOKEN}
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
      - run:
          name: Install dpkg and fakeroot
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot rpm
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Publish
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run publish

  build-linux-amd:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: arm.medium
    working_directory: ~/repo
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: "16.13.1"
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Login to Github Packages
          command: |
            npm set //npm.pkg.github.com/:_authToken=${GITHUB_PACKAGE_TOKEN}
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
      - run:
          name: Install dpkg and fakeroot
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot rpm
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Publish
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run publish

  build-win:
    executor:
      name: win/default
      size: "medium"
    working_directory: ~/repo
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: "16.13.1"
      - restore_cache:
          key: dependency-cache-win-{{ checksum "package.json" }}
      - run:
          name: Login to Github Packages
          command: |
            npm set //npm.pkg.github.com/:_authToken=${GITHUB_PACKAGE_TOKEN}
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
      - save_cache:
          key: dependency-cache-win-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Publish
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run publish

  build-mac-amd:
    macos:
      xcode: 13.2.1
    environment:
      TAG: << pipeline.git.tag >>
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: "16.13.1"
      - restore_cache:
          key: dependency-cache-macos-{{ checksum "package.json" }}
      - run:
          name: Login to Github Packages
          command: |
            npm set //npm.pkg.github.com/:_authToken=${GITHUB_PACKAGE_TOKEN}
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
      - save_cache:
          key: dependency-cache-macos-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Make Package
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run make
      - run:
          name: Install Widevine Python Module
          command: python3 -m pip install --upgrade castlabs-evs
      - run:
          name: Widevine Signature
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            export ACCOUNT_NAME=${CASTLABS_ACCOUNT_NAME}
            export ACCOUNT_PASSWORD=${CASTLABS_ACCOUNT_PASSWORD}
            python -m castlabs_evs.account reauth -n -A $ACCOUNT_NAME -P $ACCOUNT_PASSWORD
            python -m castlabs_evs.vmp sign-pkg $MACOS_APP_PATH
      - run:
          name: OSX Signature
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}/
            export DEVELOPER_ID=${APPLE_DEVELOPER_ID}
            npx electron-osx-sign ${MACOS_APP_PATH} --gatekeeper-access=false --identity=$DEVELOPER_ID --hardened-runtime=true --entitlements="entitlements.plist" --entitlements-inherit="entitlements.plist"
      - run:
          name: Zip App
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            ditto -c -k --sequesterRsrc --keepParent ${MACOS_APP_PATH}/Kenku\ FM.app ${MACOS_APP_PATH}/Kenku\ FM.zip
      - run:
          name: Notarize Zip file
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            export DEVELOPER_EMAIL=${APPLE_DEVELOPER_EMAIL}
            export DEVELOPER_PASSWORD=${APPLE_DEVELOPER_PASSWORD}
            export DEVELOPER_TEAM_ID=${APPLE_DEVELOPER_TEAM_ID}
            xcrun notarytool submit ${MACOS_APP_PATH}/Kenku\ FM.zip --apple-id $DEVELOPER_EMAIL --password $DEVELOPER_PASSWORD --team-id $DEVELOPER_TEAM_ID --wait --output-format json
      - run:
          name: Staple
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            xcrun stapler staple -v ${MACOS_APP_PATH}/Kenku\ FM.app
      - run:
          name: Create DMG
          command: |
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            npx electron-installer-dmg --background=./src/assets/dmg-background.png --icon=./src/assets/setup.icns --out=$MACOS_APP_PATH ${MACOS_APP_PATH}/Kenku\ FM.app Kenku\ FM
      - run:
          name: Publish DMG
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            export MACOS_APP_PATH=${KENKU_FM_MAC_X64_PATH}
            ./publish/script-macos.sh ${MACOS_APP_PATH}/Kenku\ FM.dmg $GITHUB_TOKEN $TAG Kenku.FM-$TAG-x64.dmg

workflows:
  version: 2
  deploy:
    jobs:
      - build-linux-arm:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/
      - build-linux-amd:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/
      - build-win:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/
      - build-mac-amd:
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              ignore: /.*/
