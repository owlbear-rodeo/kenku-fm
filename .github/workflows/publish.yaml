name: Publish Kenku FM
on:
  push:
    branches:
      - experimental/*
  workflow_dispatch:
  release:
    types:
      - prereleased

jobs:
  linux-release:
    if: false
    runs-on: warp-ubuntu-2204-x64-4x

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node Config
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "yarn"
      - run: rustup update stable && rustup default stable
      - name: Install Dependencies
        run: yarn install --non-interactive --frozen-lockfile
      - name: Get Images
        uses: actions/checkout@v4
        with:
          repository: owlbear-rodeo/kenku-fm-assets
          token: ${{ secrets.KENKU_ASSET_REPO_TOKEN }}
          sparse-checkout: |
            backgrounds
          path: kenku-fm-assets
      - name: Move Images to Directory
        run: |
          mv ./kenku-fm-assets/backgrounds/*.jpg ./src/player/backgrounds
          rm -rf ./kenku-fm-assets
      - name: Install Cargo CP Artifcact
        run: npm install -g cargo-cp-artifact
      - name: Publish App
        run: yarn run publish
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mac-release:
    if: false
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [warp-macos-13-arm64-6x]

    steps:
      - name: Set env ARCH
        run: |
          if [[ ${{ runner.arch }} == 'ARM64' ]]; then
              echo "ARCH=arm64" >> "$GITHUB_ENV"
          elif [[ ${{ runner.arch }} == 'X64' ]]; then
              echo "ARCH=x64" >> "$GITHUB_ENV"
          fi
      - name: Select Xcode version
        run: sudo xcode-select -s '/Applications/Xcode_14.3.1.app/Contents/Developer'
      - name: Check Xcode version
        run: xcodebuild -version
      - name: Set Kenku FM Path
        run: echo "KENKU_FM_MAC_PATH=./out/Kenku FM-darwin-$ARCH" >> $GITHUB_ENV
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Widevine Python Module
        run: python3 -m pip install --upgrade castlabs-evs
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node Config
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install --non-interactive --frozen-lockfile
      - name: Get Images
        uses: actions/checkout@v4
        with:
          repository: owlbear-rodeo/kenku-fm-assets
          token: ${{ secrets.KENKU_ASSET_REPO_TOKEN }}
          sparse-checkout: |
            backgrounds
          path: kenku-fm-assets
      - name: Move Images to Directory
        run: |
          mv ./kenku-fm-assets/backgrounds/*.jpg ./src/player/backgrounds
          rm -rf ./kenku-fm-assets
      - run: rustup update stable && rustup default stable
      - name: Install Cargo CP Artifcact
        run: npm install -g cargo-cp-artifact
      - name: Make Package
        run: yarn run make
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - name: Widevine Signature
        run: |
          python3 -m castlabs_evs.account -n reauth -A $CASTLABS_ACCOUNT_NAME -P $CASTLABS_ACCOUNT_PASSWORD
          python3 -m castlabs_evs.vmp sign-pkg "$KENKU_FM_MAC_PATH"
        env:
          CASTLABS_ACCOUNT_NAME: ${{ secrets.CASTLABS_ACCOUNT_NAME }}
          CASTLABS_ACCOUNT_PASSWORD: ${{ secrets.CASTLABS_ACCOUNT_PASSWORD }}
      - name: Import Apple Security Keychain
        run: |
          export CERTIFICATE_P12=certificate.p12;
          echo "${CERT_OSX_P12}"| base64 --decode -o $CERTIFICATE_P12;
          export KEYCHAIN=kenku-fm.keychain;
          security create-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
          security default-keychain -s "$KEYCHAIN";
          security unlock-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
          security import "$CERTIFICATE_P12" -k "$KEYCHAIN" -P "${CERT_PASSWORD}" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "$APPLE_KEYCHAIN_PASSWORD" "$KEYCHAIN"
          rm -fr *.p12
        env:
          CERT_OSX_P12: ${{ secrets.CERT_OSX_P12 }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
          CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      - name: OSX Signature
        run: |
          npx electron-osx-sign "${KENKU_FM_MAC_PATH}/Kenku FM.app" --gatekeeper-assess=false --identity="Developer ID Application: Mitchell McCaffrey (${APPLE_DEVELOPER_TEAM_ID})" --hardened-runtime=true --entitlements="entitlements.plist" --entitlements-inherit="entitlements.plist"
        env:
          APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          KENKU_FM_MAC_ZIP_PATH: "./out/mac"
      - name: Zip App
        run: ditto -c -k --sequesterRsrc --keepParent "${KENKU_FM_MAC_PATH}/Kenku FM.app" "${KENKU_FM_MAC_PATH}/Kenku FM.zip"
      - name: Notarize Zip file
        run: xcrun notarytool submit "$KENKU_FM_MAC_PATH"/Kenku\ FM.zip --apple-id "$APPLE_DEVELOPER_EMAIL" --password "$APPLE_DEVELOPER_PASSWORD" --team-id "$APPLE_DEVELOPER_TEAM_ID" --wait --output-format json
        env:
          APPLE_DEVELOPER_TEAM_ID: ${{ secrets.APPLE_DEVELOPER_TEAM_ID }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_DEVELOPER_PASSWORD: ${{ secrets.APPLE_DEVELOPER_PASSWORD }}
          KENKU_FM_MAC_ZIP_PATH: "./out/mac"
      - name: Staple
        run: xcrun stapler staple "${KENKU_FM_MAC_PATH}/Kenku FM.app"
        env:
          KENKU_FM_MAC_ZIP_PATH: "./out/mac"
      - name: Zip App - Release Version
        run: ditto -c -k --sequesterRsrc --keepParent "${KENKU_FM_MAC_PATH}/Kenku FM.app" "${KENKU_FM_MAC_ZIP_PATH}/Kenku FM.zip"
        env:
          KENKU_FM_MAC_ZIP_PATH: "./out/mac"
      - name: Create DMG
        run: |
          npx electron-installer-dmg --background=./src/assets/dmg-background.png --icon=./src/assets/setup.icns --out="${KENKU_FM_MAC_PATH}/" "${KENKU_FM_MAC_PATH}/Kenku FM.app" "Kenku FM"
      - name: Publish DMG
        run: |
          VERSION=${TAG//v}
          RELEASE_ID=$(./publish/script-get-github-release.sh $TAG $GITHUB_TOKEN)
          ./publish/script-macos.sh "${KENKU_FM_MAC_PATH}/Kenku FM.dmg" $GITHUB_TOKEN $RELEASE_ID kenku-fm-darwin-$ARCH-$VERSION.dmg
          ./publish/script-macos.sh "${KENKU_FM_MAC_PATH}/Kenku FM.zip" $GITHUB_TOKEN $RELEASE_ID kenku-fm-darwin-$ARCH-$VERSION.zip
        env:
          TAG: ${{ github.ref_name}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  win-release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [warp-windows-latest-x64-4x]

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install Widevine Python Module
        run: |
          python -m pip install --upgrade castlabs-evs
      - name: Checkout
        uses: actions/checkout@v4
      - name: Node Config
        uses: actions/setup-node@v4
        with:
          node-version: "18.x"
          cache: "yarn"
      - name: Install Dependencies
        run: yarn install --non-interactive --frozen-lockfile
      - name: Get Images
        uses: actions/checkout@v4
        with:
          repository: owlbear-rodeo/kenku-fm-assets
          token: ${{ secrets.KENKU_ASSET_REPO_TOKEN }}
          sparse-checkout: |
            backgrounds
          path: kenku-fm-assets
      - name: Move Images to Directory
        run: |
          mv ./kenku-fm-assets/backgrounds/*.jpg ./src/player/backgrounds
          rm -rf ./kenku-fm-assets
      - run: rustup update stable && rustup default stable
      - name: Install Cargo CP Artifcact
        run: npm install -g cargo-cp-artifact
      - name: Make Package
        run: yarn run make
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: "true"
      - name: Signtool
        run: |
          echo $env:WINDOWS_CERT | openssl base64 -A -d -out certificate.pfx
          
          $DIR = $(pwd)
          $CERT = "${DIR}\certificate.pfx"
          $CERT_PASSWORD = $(echo $env:WINDOWS_CERT_PWD | openssl base64 -A -d)

          C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign /d /a /f "${CERT}" /p "${CERT_PASSWORD}" /tr "http://timestamp.comodoca.com" /td "sha256" /fd "sha256" "${DIR}\out\Kenku FM-win32-x64\kenku-fm.exe"
          C:\"Program Files (x86)"\"Windows Kits"\10\bin\x64\signtool.exe sign /d /a /f "${CERT}" /p "${CERT_PASSWORD}" /tr "http://timestamp.comodoca.com" /td "sha256" /fd "sha256" "${DIR}\out\Kenku FM-win32-x64\Squirrel.exe"
        env:
          WINDOWS_CERT: ${{ secrets.WINDOWS_CERT }}
          WINDOWS_CERT_PWD: ${{ secrets.WINDOWS_CERT_PWD }}
      - name: Widevine Signature
        run: |
          python -m castlabs_evs.account -n reauth -A $env:CASTLABS_ACCOUNT_NAME -P $env:CASTLABS_ACCOUNT_PASSWORD
          python -m castlabs_evs.vmp sign-pkg ".\out\Kenku FM-win32-x64"
        env:
          CASTLABS_ACCOUNT_NAME: ${{ secrets.CASTLABS_ACCOUNT_NAME }}
          CASTLABS_ACCOUNT_PASSWORD: ${{ secrets.CASTLABS_ACCOUNT_PASSWORD }}
      - name: Create App
        shell: bash.exe
        run: |
          CERT_PASSWORD=$(echo "${WINDOWS_CERT_PWD}" | openssl base64 -A -d)
          yarn install --non-interactive --frozen-lockfile --cwd ./publish/windows
          
          VERSION=${TAG//v}
          node ./publish/windows/index.js ./ $VERSION  $CERT_PASSWORD
        env:
          WINDOWS_CERT_PWD: ${{ secrets.WINDOWS_CERT_PWD }}
          TAG: ${{ github.ref_name}}
      # - name: Publish
      #   shell: bash.exe
      #   run: |
      #     VERSION=${TAG//v}
      #     RELEASE_ID=$(./publish/script-get-github-release.sh $TAG $GITHUB_TOKEN)
      #     ./publish/script-win.sh ./out/windows/kenku-fm-$VERSION-win32-x64.exe $GITHUB_TOKEN $RELEASE_ID kenku-fm-$VERSION-win32-x64.exe
      #     ./publish/script-win.sh ./out/windows/kenku-fm-$VERSION-full.nupkg $GITHUB_TOKEN $RELEASE_ID kenku-fm-$VERSION-full.nupkg
      #     ./publish/script-win.sh ./out/windows/RELEASES $GITHUB_TOKEN $RELEASE_ID RELEASES
      #   env:
      #     TAG: ${{ github.ref_name}}
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}